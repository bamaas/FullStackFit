(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@fortawesome/fontawesome-svg-core'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('@fortawesome/angular-fontawesome', ['exports', '@angular/core', '@angular/common', '@fortawesome/fontawesome-svg-core', '@angular/platform-browser'], factory) :
    (global = global || self, factory((global.fortawesome = global.fortawesome || {}, global.fortawesome['angular-fontawesome'] = {}), global.ng.core, global.ng.common, global.fontawesomeSvgCore, global.ng.platformBrowser));
}(this, function (exports, core, common, fontawesomeSvgCore, platformBrowser) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Returns if is IconLookup or not.
     * @type {?}
     */
    var isIconLookup = (/**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        return ((/** @type {?} */ (i))).prefix !== undefined && ((/** @type {?} */ (i))).iconName !== undefined;
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Normalizing icon spec.
     * @type {?}
     */
    var faNormalizeIconSpec = (/**
     * @param {?} iconSpec
     * @param {?=} defaultPrefix
     * @return {?}
     */
    function (iconSpec, defaultPrefix) {
        if (defaultPrefix === void 0) { defaultPrefix = 'fas'; }
        if (typeof iconSpec === 'undefined' || iconSpec === null) {
            return null;
        }
        if (isIconLookup(iconSpec)) {
            return iconSpec;
        }
        if (Array.isArray(iconSpec) && ((/** @type {?} */ (iconSpec))).length === 2) {
            return { prefix: iconSpec[0], iconName: iconSpec[1] };
        }
        if (typeof iconSpec === 'string') {
            return { prefix: defaultPrefix, iconName: iconSpec };
        }
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var objectWithKey = (/**
     * @template T
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        var _a;
        return (Array.isArray(value) && value.length > 0) || (!Array.isArray(value) && value) ? (_a = {}, _a[key] = value, _a) : {};
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Fontawesome class list.
     * Returns classes array by props.
     * @type {?}
     */
    var faClassList = (/**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        var _a;
        /** @type {?} */
        var classes = (_a = {
                'fa-spin': props.spin,
                'fa-pulse': props.pulse,
                'fa-fw': props.fixedWidth,
                'fa-border': props.border,
                'fa-li': props.listItem,
                'fa-inverse': props.inverse,
                'fa-layers-counter': props.counter,
                'fa-flip-horizontal': props.flip === 'horizontal' || props.flip === 'both',
                'fa-flip-vertical': props.flip === 'vertical' || props.flip === 'both'
            },
            _a["fa-" + props.size] = props.size !== null,
            _a["fa-rotate-" + props.rotate] = props.rotate !== null,
            _a["fa-pull-" + props.pull] = props.pull !== null,
            _a);
        return Object.keys(classes)
            .map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return (classes[key] ? key : null); }))
            .filter((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return key; }));
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var faWarnIfIconHtmlMissing = (/**
     * @param {?} iconObj
     * @param {?} iconSpec
     * @return {?}
     */
    function (iconObj, iconSpec) {
        if (iconSpec && !iconObj) {
            console.error("FontAwesome: Could not find icon with iconName=" + iconSpec.iconName + " and prefix=" + iconSpec.prefix);
        }
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var faWarnIfIconSpecMissing = (/**
     * @param {?} iconSpec
     * @return {?}
     */
    function (iconSpec) {
        if (!iconSpec) {
            console.error('FontAwesome: Could not find icon. ' +
                "It looks like you've provided a null or undefined icon object to this component.");
        }
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var faNotFoundIconHtml = "<svg class=\"" + fontawesomeSvgCore.config.replacementClass + "\" viewBox=\"0 0 448 512\"></svg><!--icon not found-->";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FaIconService = /** @class */ (function () {
        function FaIconService() {
            this.defaultPrefix = 'fas';
        }
        FaIconService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ FaIconService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function FaIconService_Factory() { return new FaIconService(); }, token: FaIconService, providedIn: "root" });
        return FaIconService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Fontawesome icon.
     */
    var FaIconComponent = /** @class */ (function () {
        function FaIconComponent(sanitizer, iconService) {
            this.sanitizer = sanitizer;
            this.iconService = iconService;
            this.classes = [];
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        FaIconComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes) {
                this.updateIconSpec();
                this.updateParams();
                this.updateIcon();
                this.renderIcon();
            }
        };
        /**
         * Updating icon spec.
         */
        /**
         * Updating icon spec.
         * @private
         * @return {?}
         */
        FaIconComponent.prototype.updateIconSpec = /**
         * Updating icon spec.
         * @private
         * @return {?}
         */
        function () {
            this.iconSpec = faNormalizeIconSpec(this.iconProp, this.iconService.defaultPrefix);
        };
        /**
         * Updating params by component props.
         */
        /**
         * Updating params by component props.
         * @private
         * @return {?}
         */
        FaIconComponent.prototype.updateParams = /**
         * Updating params by component props.
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var classOpts = {
                flip: this.flip,
                spin: this.spin,
                pulse: this.pulse,
                border: this.border,
                inverse: this.inverse,
                listItem: this.listItem,
                size: this.size || null,
                pull: this.pull || null,
                rotate: this.rotate || null,
                fixedWidth: this.fixedWidth
            };
            /** @type {?} */
            var classes = objectWithKey('classes', __spread(faClassList(classOpts), this.classes));
            /** @type {?} */
            var mask = objectWithKey('mask', faNormalizeIconSpec(this.mask, this.iconService.defaultPrefix));
            /** @type {?} */
            var parsedTransform = typeof this.transform === 'string' ? fontawesomeSvgCore.parse.transform(this.transform) : this.transform;
            /** @type {?} */
            var transform = objectWithKey('transform', parsedTransform);
            this.params = __assign({ title: this.title }, transform, classes, mask, { styles: this.styles, symbol: this.symbol });
        };
        /**
         * Updating icon by params and icon spec.
         */
        /**
         * Updating icon by params and icon spec.
         * @private
         * @return {?}
         */
        FaIconComponent.prototype.updateIcon = /**
         * Updating icon by params and icon spec.
         * @private
         * @return {?}
         */
        function () {
            this.icon = fontawesomeSvgCore.icon(this.iconSpec, this.params);
        };
        /**
         * Rendering icon.
         */
        /**
         * Rendering icon.
         * @private
         * @return {?}
         */
        FaIconComponent.prototype.renderIcon = /**
         * Rendering icon.
         * @private
         * @return {?}
         */
        function () {
            faWarnIfIconSpecMissing(this.iconSpec);
            faWarnIfIconHtmlMissing(this.icon, this.iconSpec);
            this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(this.icon ? this.icon.html.join('\n') : faNotFoundIconHtml);
        };
        FaIconComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'fa-icon',
                        template: "",
                        host: {
                            class: 'ng-fa-icon',
                        }
                    }] }
        ];
        /** @nocollapse */
        FaIconComponent.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer },
            { type: FaIconService }
        ]; };
        FaIconComponent.propDecorators = {
            iconProp: [{ type: core.Input, args: ['icon',] }],
            title: [{ type: core.Input }],
            spin: [{ type: core.Input }],
            pulse: [{ type: core.Input }],
            mask: [{ type: core.Input }],
            styles: [{ type: core.Input }],
            flip: [{ type: core.Input }],
            size: [{ type: core.Input }],
            pull: [{ type: core.Input }],
            border: [{ type: core.Input }],
            inverse: [{ type: core.Input }],
            symbol: [{ type: core.Input }],
            listItem: [{ type: core.Input }],
            rotate: [{ type: core.Input }],
            fixedWidth: [{ type: core.Input }],
            classes: [{ type: core.Input }],
            transform: [{ type: core.Input }],
            renderedIconHTML: [{ type: core.HostBinding, args: ['innerHTML',] }]
        };
        return FaIconComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Fontawesome layers.
     */
    var FaLayersComponent = /** @class */ (function () {
        function FaLayersComponent(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
        }
        /**
         * @return {?}
         */
        FaLayersComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.renderer.addClass(this.elementRef.nativeElement, 'fa-layers');
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        FaLayersComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if ('size' in changes) {
                if (changes.size.currentValue != null) {
                    this.renderer.addClass(this.elementRef.nativeElement, "fa-" + changes.size.currentValue);
                }
                if (changes.size.previousValue != null) {
                    this.renderer.removeClass(this.elementRef.nativeElement, "fa-" + changes.size.previousValue);
                }
            }
        };
        FaLayersComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'fa-layers',
                        template: "<ng-content select=\"fa-icon, fa-layers-text, fa-layers-counter\"></ng-content>"
                    }] }
        ];
        /** @nocollapse */
        FaLayersComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        FaLayersComponent.propDecorators = {
            size: [{ type: core.Input }],
            fixedWidth: [{ type: core.Input }, { type: core.HostBinding, args: ['class.fa-fw',] }]
        };
        return FaLayersComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Warns if parent component not existing.
     * @type {?}
     */
    var faWarnIfParentNotExist = (/**
     * @param {?} parent
     * @param {?} parentName
     * @param {?} childName
     * @return {?}
     */
    function (parent, parentName, childName) {
        if (!parent) {
            console.error("FontAwesome: " + childName + " should be used as child of " + parentName + " only.");
        }
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var FaLayersTextBaseComponent = /** @class */ (function () {
        function FaLayersTextBaseComponent(parent, sanitizer) {
            this.parent = parent;
            this.sanitizer = sanitizer;
            this.classes = [];
            faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        FaLayersTextBaseComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes) {
                this.updateParams();
                this.updateContent();
            }
        };
        /**
         * Updating content by params and content.
         */
        /**
         * Updating content by params and content.
         * @private
         * @return {?}
         */
        FaLayersTextBaseComponent.prototype.updateContent = /**
         * Updating content by params and content.
         * @private
         * @return {?}
         */
        function () {
            this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(this.renderFontawesomeObject(this.content || '', this.params).html.join('\n'));
        };
        FaLayersTextBaseComponent.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FaLayersTextBaseComponent.ctorParameters = function () { return [
            { type: FaLayersComponent, decorators: [{ type: core.Inject, args: [core.forwardRef((/**
                             * @return {?}
                             */
                            function () { return FaLayersComponent; })),] }, { type: core.Optional }] },
            { type: platformBrowser.DomSanitizer }
        ]; };
        FaLayersTextBaseComponent.propDecorators = {
            renderedHTML: [{ type: core.HostBinding, args: ['innerHTML',] }],
            content: [{ type: core.Input }],
            title: [{ type: core.Input }],
            styles: [{ type: core.Input }],
            classes: [{ type: core.Input }]
        };
        return FaLayersTextBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Fontawesome layers text.
     */
    var FaLayersTextComponent = /** @class */ (function (_super) {
        __extends(FaLayersTextComponent, _super);
        function FaLayersTextComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Updating params by component props.
         */
        /**
         * Updating params by component props.
         * @protected
         * @return {?}
         */
        FaLayersTextComponent.prototype.updateParams = /**
         * Updating params by component props.
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var classOpts = {
                flip: this.flip,
                spin: this.spin,
                pulse: this.pulse,
                border: this.border,
                inverse: this.inverse,
                listItem: this.listItem,
                size: this.size || null,
                pull: this.pull || null,
                rotate: this.rotate || null,
                fixedWidth: this.fixedWidth
            };
            /** @type {?} */
            var classes = objectWithKey('classes', __spread(faClassList(classOpts), this.classes));
            /** @type {?} */
            var parsedTransform = typeof this.transform === 'string' ? fontawesomeSvgCore.parse.transform(this.transform) : this.transform;
            /** @type {?} */
            var transform = objectWithKey('transform', parsedTransform);
            this.params = __assign({}, transform, classes, { title: this.title, styles: this.styles });
        };
        /**
         * @protected
         * @param {?} content
         * @param {?=} params
         * @return {?}
         */
        FaLayersTextComponent.prototype.renderFontawesomeObject = /**
         * @protected
         * @param {?} content
         * @param {?=} params
         * @return {?}
         */
        function (content, params) {
            return fontawesomeSvgCore.text(content, params);
        };
        FaLayersTextComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'fa-layers-text',
                        template: '',
                        host: {
                            class: 'ng-fa-layers-text'
                        }
                    }] }
        ];
        FaLayersTextComponent.propDecorators = {
            spin: [{ type: core.Input }],
            pulse: [{ type: core.Input }],
            flip: [{ type: core.Input }],
            size: [{ type: core.Input }],
            pull: [{ type: core.Input }],
            border: [{ type: core.Input }],
            inverse: [{ type: core.Input }],
            listItem: [{ type: core.Input }],
            rotate: [{ type: core.Input }],
            fixedWidth: [{ type: core.Input }],
            transform: [{ type: core.Input }]
        };
        return FaLayersTextComponent;
    }(FaLayersTextBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Fontawesome layers counter.
     */
    var FaLayersCounterComponent = /** @class */ (function (_super) {
        __extends(FaLayersCounterComponent, _super);
        function FaLayersCounterComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Updating params by component props.
         */
        /**
         * Updating params by component props.
         * @protected
         * @return {?}
         */
        FaLayersCounterComponent.prototype.updateParams = /**
         * Updating params by component props.
         * @protected
         * @return {?}
         */
        function () {
            this.params = {
                title: this.title,
                classes: this.classes,
                styles: this.styles,
            };
        };
        /**
         * @protected
         * @param {?} content
         * @param {?=} params
         * @return {?}
         */
        FaLayersCounterComponent.prototype.renderFontawesomeObject = /**
         * @protected
         * @param {?} content
         * @param {?=} params
         * @return {?}
         */
        function (content, params) {
            return fontawesomeSvgCore.counter(content, params);
        };
        FaLayersCounterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'fa-layers-counter',
                        template: '',
                        host: {
                            class: 'ng-fa-layers-counter'
                        }
                    }] }
        ];
        return FaLayersCounterComponent;
    }(FaLayersTextBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FontAwesomeModule = /** @class */ (function () {
        function FontAwesomeModule() {
        }
        FontAwesomeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [
                            FaIconComponent,
                            FaLayersComponent,
                            FaLayersTextComponent,
                            FaLayersCounterComponent,
                        ],
                        exports: [
                            FaIconComponent,
                            FaLayersComponent,
                            FaLayersTextComponent,
                            FaLayersCounterComponent,
                        ],
                    },] }
        ];
        return FontAwesomeModule;
    }());

    exports.FaIconComponent = FaIconComponent;
    exports.FaIconService = FaIconService;
    exports.FaLayersComponent = FaLayersComponent;
    exports.FaLayersCounterComponent = FaLayersCounterComponent;
    exports.FaLayersTextComponent = FaLayersTextComponent;
    exports.FontAwesomeModule = FontAwesomeModule;
    exports.ɵa = FaLayersTextBaseComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular-fontawesome.umd.js.map
