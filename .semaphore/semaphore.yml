version: v1.0
name: lint, build and test
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804
auto_cancel:
  running:
    when: "true"
fail_fast:
  cancel:
    when: "true"
blocks:
  # - name: Unit test
  #   dependencies: []
  #   task:
  #     prologue:
  #       commands:
  #         - checkout
  #         - source ./.semaphore/scripts/export-git-env-vars.sh
  #         - sem-version java 11
  #     jobs:
  #       - name: backend
  #         commands: 
  #           - mvn test -f ./backend
  - name: Code analysis
    dependencies: []
    task:
      secrets:
        - name: sonarcloud
      prologue:
        commands:
          - checkout
          - cache restore
          - source ./.semaphore/scripts/export-git-env-vars.sh
          - sem-version java 11
      epilogue:
        always:
          commands:
            - cache store
      jobs:
        - name: SonarQube
          priority:
            - value: 10
              when: true
          commands:
            - export SONAR_SCANNER_VERSION=4.2.0.1873
            - export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
            - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
            - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
            - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
            - export SONAR_SCANNER_OPTS="-server"
            - mvn package -Dmaven.compiler.executable=javac -Dmaven.test.skip=true -f ./backend
            - sonar-scanner -Dsonar.organization=bamaas -Dsonar.projectKey=bamaas_FullStackFit -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.branch.name=${GIT_BRANCH} -Dsonar.java.binaries="backend/target" -Dsonar.exclusions="**/.archive/**, **/test/**, **/.github/**, **/.mergify/**"
  - name: Docker build
    dependencies: []
    task:
      secrets:
        - name: docker
      prologue:
        commands:
          - checkout
          - cache restore
          - source ./.semaphore/scripts/export-git-env-vars.sh
          - echo $DOCKER_PASSWORD | docker login --username "$DOCKER_USERNAME" --password-stdin
      epilogue:
        always:
          commands:
            - cache store
      jobs:
        - name: Database
          priority:
            - value: 65
              when: true
          commands:
            - make build s="database"
            - docker tag fullstackfit_database:b.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_database.${IMAGE_TAG}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_database.${IMAGE_TAG}
        - name: Backend
          priority:
            - value: 80
              when: true
          commands:
            - sem-version java 11
            - sed -i 's/localhost\:5432/database/g' ./backend/src/main/resources/application.properties
            - sed -i 's/localhost\:8080/iam\:8080/g' ./backend/src/main/resources/application.properties
            - mvn package -Dmaven.compiler.executable=javac -Dmaven.test.skip=true -f ./backend
            - make build s="backend"
            - docker tag fullstackfit_backend:b.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_backend.${IMAGE_TAG}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_backend.${IMAGE_TAG}
        - name: Frontend
          priority:
          - value: 100
            when: true
          commands:
            - make build s="frontend"
            - docker tag fullstackfit_frontend:b.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_frontend.${IMAGE_TAG}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_frontend.${IMAGE_TAG}
        - name: Reverse proxy
          priority:
            - value: 65
              when: true
          commands:
            - make build s="reverseproxy"
            - docker tag fullstackfit_reverseproxy:b.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_reverseproxy.${IMAGE_TAG}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_reverseproxy.${IMAGE_TAG}
        - name: IAM
          priority:
            - value: 65
              when: true
          commands:
            - make build s="iam"
            - docker tag fullstackfit_iam:b.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_iam.${IMAGE_TAG}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_iam.${IMAGE_TAG}
  - name: Deploy to Kubernetes
    dependencies: ["Docker build"]
    task:
      secrets:
        - name: kubectl
        - name: keycloak
      env_vars:
        - name: KUBECONFIG
          value: /home/semaphore/.kube/config.yaml
      prologue:
        commands:
          - checkout
          - source ./.semaphore/scripts/export-git-env-vars.sh
      jobs:
        - name: To test env
          priority:
            - value: 65
              when: true
          commands:
            # change keycloak frontend url & credentials
            - sed -i -e "s/fit\.basmaas\.nl/test\.basmaas\.nl/g" ./.kubernetes/deployment/iam.yaml
            - sed -i -e "s/keycloakuser/$KEYCLOAK_ADMIN_USERNAME_TEST/g" ./.kubernetes/deployment/iam.yaml
            - sed -i -e "s/keycloakpassword/$KEYCLOAK_ADMIN_PASSWORD_TEST/g" ./.kubernetes/deployment/iam.yaml
            # Database volume mount point
            - sed -i -e "s/prod\/volumes/test\/volumes/g" ./.kubernetes/statefulset/database.yaml
            # change image tags from :latest -> :$IMAGE_TAG
            - sed -i -e "s/fullstackfit_iam:latest/registry:fullstackfit_iam.$IMAGE_TAG/g" ./.kubernetes/deployment/iam.yaml
            - sed -i -e "s/fullstackfit_backend:latest/registry:fullstackfit_backend.$IMAGE_TAG/g" ./.kubernetes/deployment/backend.yaml
            - sed -i -e "s/fullstackfit_frontend:latest/registry:fullstackfit_frontend.$IMAGE_TAG/g" ./.kubernetes/deployment/frontend.yaml
            - sed -i -e "s/fullstackfit_reverseproxy:latest/registry:fullstackfit_reverseproxy.$IMAGE_TAG/g" ./.kubernetes/deployment/reverse-proxy.yaml
            - sed -i -e "s/fullstackfit_database:latest/registry:fullstackfit_database.$IMAGE_TAG/g" ./.kubernetes/statefulset/database.yaml
            - sed -i -e 's/EXPOSED-NODEPORT/30004/g' ./.kubernetes/service/reverse-proxy-nodeport.yaml
            - kubectl -n test apply -f ./.kubernetes/ --recursive --insecure-skip-tls-verify
            - bash ./.semaphore/scripts/wait-until-pod-is-ready.sh test database
            - bash ./.semaphore/scripts/wait-until-pod-is-ready.sh test backend
            - bash ./.semaphore/scripts/wait-until-pod-is-ready.sh test iam
            - bash ./.semaphore/scripts/wait-until-pod-is-ready.sh test frontend
            - bash ./.semaphore/scripts/wait-until-pod-is-ready.sh test reverse-proxy
  - name: Test
    dependencies: ["Deploy to Kubernetes"]
    task:
      prologue:
        commands:
          - checkout
          - cache restore
          - cd test
          - kubectl -n test port-forward statefulset/database 5432:5432 --insecure-skip-tls-verify &
          - npm install
      epilogue:
        always:
          commands:
            - pkill kubectl
            - cache store
      jobs:
        - name: API
          priority:
            - value: 80
              when: true
          commands:
            - "VIEWPORT=desktop CYPRESS_BASE_URL='https://test.basmaas.nl' npx cypress run --spec 'cypress/integration/api.spec.js' --env username=api,password=api --group API --browser chrome --headless --record --key ${CYPRESS_DASHBOARD_KEY} --tag 'API'"
        - name: E2E | Desktop
          priority:
            - value: 65
              when: true
          commands:
            - "VIEWPORT=desktop CYPRESS_BASE_URL='https://test.basmaas.nl' npx cypress run --spec 'cypress/integration/e2e.spec.js' --group 'E2E | Desktop' --env username=desktop-e2e,password=desktop-e2e --browser chrome --headless --record --key ${CYPRESS_DASHBOARD_KEY} --tag 'Desktop, E2E'"
        - name: E2E | Mobile
          priority:
            - value: 65
              when: true
          commands:
            - "VIEWPORT=mobile CYPRESS_BASE_URL='https://test.basmaas.nl' npx cypress run --spec 'cypress/integration/e2e.spec.js' --group 'E2E | Mobile' --env username=mobile-e2e,password=mobile-e2e --browser chrome --headless --record --key ${CYPRESS_DASHBOARD_KEY} --tag 'Mobile,E2E'"
      secrets:
        - name: kubectl
        - name: cypress
      env_vars:
        - name: KUBECONFIG
          value: /home/semaphore/.kube/config.yaml
  - name: Promote Image
    dependencies: ["Test"]
    task:
      secrets:
        - name: docker
      prologue:
        commands:
          - checkout
          - cache restore
          - source ./.semaphore/scripts/export-git-env-vars.sh
          - echo $DOCKER_PASSWORD | docker login --username "$DOCKER_USERNAME" --password-stdin
      epilogue:
        always:
          commands:
            - cache store
      jobs:
        - name: To DockerHub
          priority:
            - value: 65
              when: true
          commands:
          # Pull images from bamaas/registry
          - echo ${DOCKER_USERNAME}/registry:fullstackfit_frontend.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_backend.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_reverseproxy.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_database.${IMAGE_TAG} ${DOCKER_USERNAME}/registry:fullstackfit_iam.${IMAGE_TAG} | xargs -n 1 docker pull
          # Tag to latest
          - echo $DOCKER_USERNAME/registry:fullstackfit_frontend.$IMAGE_TAG $DOCKER_USERNAME/fullstackfit_frontend:latest $DOCKER_USERNAME/registry:fullstackfit_backend.$IMAGE_TAG $DOCKER_USERNAME/fullstackfit_backend:latest $DOCKER_USERNAME/registry:fullstackfit_database.$IMAGE_TAG $DOCKER_USERNAME/fullstackfit_database:latest $DOCKER_USERNAME/registry:fullstackfit_reverseproxy.$IMAGE_TAG $DOCKER_USERNAME/fullstackfit_reverseproxy:latest $DOCKER_USERNAME/registry:fullstackfit_iam.$IMAGE_TAG $DOCKER_USERNAME/fullstackfit_iam:latest | xargs -n 2 docker tag
          # Push latest
          - echo ${DOCKER_USERNAME}/fullstackfit_frontend:latest ${DOCKER_USERNAME}/fullstackfit_backend:latest ${DOCKER_USERNAME}/fullstackfit_reverseproxy:latest ${DOCKER_USERNAME}/fullstackfit_database:latest ${DOCKER_USERNAME}/fullstackfit_iam:latest | xargs -n 1 docker push
promotions:
- name: Deploy
  pipeline_file: deploy-prod.yml
  auto_promote:
    when: "result = 'passed' and branch = 'master'"
execution_time_limit:
  minutes: 30
