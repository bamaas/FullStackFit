version: v1.0
name: lint, build and test
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804
auto_cancel:
  running:
    when: "true"
fail_fast:
  cancel:
    when: "true"
blocks:
  - name: Lint
    dependencies: []
    task:
      prologue:
        commands:
          - checkout
          - sem-version python 3.7
          - export GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
          - export GIT_COMMIT_SHA_LONG=$(git rev-parse HEAD)
          - export GIT_COMMIT_MSG=$(git show -s --format=%B ${GIT_COMMIT_SHA})
      jobs:
        - name: "Python backend"
          commands: 
            - pip install flake8
            - flake8 ./backend/app/ --exit-zero --tee --output-file=lint_python.txt -v
        - name: Dockerfiles
          commands:
            - printf "\n\nBackend\n------------------\n" >> lint_dockerfiles.txt && make lint-dockerfile f="./test/Dockerfile | tee -a lint_dockerfiles.txt"
            - printf "\n\nDatabase\n------------------\n" >> lint_dockerfiles.txt && make lint-dockerfile f="./database/Dockerfile | tee -a lint_dockerfiles.txt"
            - printf "\n\nFrontend\n------------------\n" >> lint_dockerfiles.txt && make lint-dockerfile f="./frontend/Dockerfile | tee -a lint_dockerfiles.txt"
            - printf "\n\nReverse-proxy\n------------------\n" >> lint_dockerfiles.txt && make lint-dockerfile f="./reverse-proxy/Dockerfile | tee -a lint_dockerfiles.txt"
      epilogue:
        always:
          commands:
            - artifact push job ./lint_*.txt
        on_fail:
          commands:
            - make notify-gitter level=error
  - name: Unit test
    dependencies: ["Lint"]
    task:
      prologue:
        commands:
          - checkout
          - sem-version python 3.7
          - export GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
          - export GIT_COMMIT_SHA_LONG=$(git rev-parse HEAD)
          - export GIT_COMMIT_MSG=$(git show -s --format=%B ${GIT_COMMIT_SHA})
      jobs:
        - name: backend
          commands: 
           - echo test
           # - make test-unit
      epilogue:
        on_fail:
          commands:
            - make notify-gitter level=error
  - name: Code analysis
    dependencies: ["Unit test"]
    task:
      secrets:
        - name: sonarcloud
      prologue:
        commands:
          - checkout
          - sem-version java 11
          - export GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
          - export GIT_COMMIT_SHA_LONG=$(git rev-parse HEAD)
          - export GIT_COMMIT_MSG=$(git show -s --format=%B ${GIT_COMMIT_SHA})
          - export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
      jobs:
        - name: sonarcloud
          commands:
            - export SONAR_SCANNER_VERSION=4.2.0.1873
            - export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
            - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
            - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
            - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
            - export SONAR_SCANNER_OPTS="-server"
            #- sonar-scanner -Dsonar.organization=bamaas -Dsonar.projectKey=bamaas_FullStackFit -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.branch.name=${GIT_BRANCH}
      epilogue:
        on_fail:
          commands:
            - make notify-gitter level=error
  - name: Build
    dependencies: ["Code analysis"]
    task:
      secrets:
        - name: docker
      prologue:
        commands:
          - checkout
          - export GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
          - export GIT_COMMIT_SHA_LONG=$(git rev-parse HEAD)
          - export GIT_COMMIT_MSG=$(git show -s --format=%B ${GIT_COMMIT_SHA})
          - echo $GIT_COMMIT_SHA
          - echo $DOCKER_PASSWORD | docker login --username "$DOCKER_USERNAME" --password-stdin
      jobs:
        - name: database
          commands:
            - make build s="database"
            - docker tag fullstackfit_database:b.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_database.${GIT_COMMIT_SHA}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_database.${GIT_COMMIT_SHA}
        - name: backend
          commands:
            - sem-version java 11
            - cd ./backend
            - mvn package -Dmaven.compiler.executable=javac
            - cd ..
            - make build s="backend"
            - docker tag fullstackfit_backend:b.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_backend.${GIT_COMMIT_SHA}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_backend.${GIT_COMMIT_SHA}
        - name: frontend
          commands:
            - make build s="frontend"
            - docker tag fullstackfit_frontend:b.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_frontend.${GIT_COMMIT_SHA}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_frontend.${GIT_COMMIT_SHA}
        - name: proxy
          commands:
            - make build s="reverseproxy"
            - docker tag fullstackfit_reverseproxy:b.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_reverseproxy.${GIT_COMMIT_SHA}
            - docker push ${DOCKER_USERNAME}/registry:fullstackfit_reverseproxy.${GIT_COMMIT_SHA}
      epilogue:
        on_fail:
          commands:
            - make notify-gitter level=error
  - name: Integration test
    dependencies: ["Build"]
    task:
      prologue:
        commands:
          - checkout
          - export GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
          - export GIT_COMMIT_SHA_LONG=$(git rev-parse HEAD)
          - export GIT_COMMIT_MSG=$(git show -s --format=%B ${GIT_COMMIT_SHA})
          - echo $GIT_COMMIT_SHA
          # create .env file from environment variables
          - echo GIT_COMMIT_SHA=${GIT_COMMIT_SHA} >> ./test/.env
          - echo GIT_COMMIT_MSG=${GIT_COMMIT_MSG} >> ./test/.env
          # Docker
          - echo $DOCKER_PASSWORD | docker login --username "$DOCKER_USERNAME" --password-stdin
          # Pull images from bamaas/registry (private container registry)
          - echo ${DOCKER_USERNAME}/registry:fullstackfit_frontend.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_backend.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_reverseproxy.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_database.${GIT_COMMIT_SHA} | xargs -n 1 docker pull
          # Retag to latest
          - echo $DOCKER_USERNAME/registry:fullstackfit_frontend.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_frontend:latest $DOCKER_USERNAME/registry:fullstackfit_backend.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_backend:latest $DOCKER_USERNAME/registry:fullstackfit_database.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_database:latest $DOCKER_USERNAME/registry:fullstackfit_reverseproxy.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_reverseproxy:latest | xargs -n 2 docker tag
          # Start application with 'make latest'. In this way we start the application the same was as we do in production.
          - make latest
      jobs:
        - name: tdee
          commands:
            - "bash ./test/testcontainer robotlooper -v environment:localhost -i tdee testsuites/ws.robot"
        #- name: bmr
        #  commands:
        #    - "bash ./test/testcontainer robotlooper -v environment:localhost -i bmr testsuites/ws.robot"
        - name: bmi
          commands:
            - "bash ./test/testcontainer robotlooper -v environment:localhost -i bmi testsuites/ws.robot"
      epilogue:
        always:
          commands:
            - make shutdown
            - artifact push job ./test/logs/log.html
            - artifact push job ./test/logs/output.xml
            - artifact push job ./test/logs/report.html
        on_fail:
          commands:
            - make notify-gitter level=error
      secrets:
        - name: docker
  - name: E2E test
    dependencies: ["Build"]
    task:
      jobs:
        - name: tdee
          commands:
            - bash ./test/testcontainer robotlooper -v environment:localhost -v remote_webdriver:false -v browser:Chrome testsuites/gui.robot
      prologue:
        commands:
          - checkout
          - export GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
          - export GIT_COMMIT_SHA_LONG=$(git rev-parse HEAD)
          - export GIT_COMMIT_MSG=$(git show -s --format=%B ${GIT_COMMIT_SHA})
          # create .env file from environment variables
          - echo GIT_COMMIT_SHA=${GIT_COMMIT_SHA} >> ./test/.env
          - echo GIT_COMMIT_MSG=${GIT_COMMIT_MSG} >> ./test/.env
          # Docker
          - echo $DOCKER_PASSWORD | docker login --username "$DOCKER_USERNAME" --password-stdin
          # Pull images from bamaas/registry (private container registry)
          - echo ${DOCKER_USERNAME}/registry:fullstackfit_frontend.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_backend.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_reverseproxy.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_database.${GIT_COMMIT_SHA} | xargs -n 1 docker pull
          # Retag to latest
          - echo $DOCKER_USERNAME/registry:fullstackfit_frontend.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_frontend:latest $DOCKER_USERNAME/registry:fullstackfit_backend.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_backend:latest $DOCKER_USERNAME/registry:fullstackfit_database.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_database:latest $DOCKER_USERNAME/registry:fullstackfit_reverseproxy.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_reverseproxy:latest | xargs -n 2 docker tag
          # Start application with 'make latest'. In this way we start the application the same was as we do in production.
          - make latest
      epilogue:
        always:
          commands:
            - make shutdown
            - artifact push job ./test/logs/log.html
            - artifact push job ./test/logs/output.xml
            - artifact push job ./test/logs/report.html
        on_fail:
          commands:
            - make notify-gitter level=error
      secrets:
        - name: docker
  - name: Compatibility test
    dependencies: ["Build"]
    task:
      secrets:
        - name: docker
        - name: browserstack
      prologue:
        commands:
          - checkout
          - export GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
          - export GIT_COMMIT_SHA_LONG=$(git rev-parse HEAD)
          - export GIT_COMMIT_MSG=$(git show -s --format=%B ${GIT_COMMIT_SHA})
          - echo $GIT_COMMIT_SHA
          # create .env file from environment variables
          - echo BROWSERSTACK_URL=${BROWSERSTACK_URL} >> ./test/.env
          - echo BROWSERSTACK_USER=${BROWSERSTACK_USER} >> ./test/.env
          - echo BROWSERSTACK_KEY=${BROWSERSTACK_KEY} >> ./test/.env
          - echo GIT_COMMIT_SHA=${GIT_COMMIT_SHA} >> ./test/.env
          - echo GIT_COMMIT_MSG=${GIT_COMMIT_MSG} >> ./test/.env
          # Docker
          - echo $DOCKER_PASSWORD | docker login --username "$DOCKER_USERNAME" --password-stdin
          # Pull images from bamaas/registry (private container registry)
          - echo ${DOCKER_USERNAME}/registry:fullstackfit_frontend.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_backend.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_reverseproxy.${GIT_COMMIT_SHA} ${DOCKER_USERNAME}/registry:fullstackfit_database.${GIT_COMMIT_SHA} | xargs -n 1 docker pull
          # Retag to latest
          - echo $DOCKER_USERNAME/registry:fullstackfit_frontend.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_frontend:latest $DOCKER_USERNAME/registry:fullstackfit_backend.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_backend:latest $DOCKER_USERNAME/registry:fullstackfit_database.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_database:latest $DOCKER_USERNAME/registry:fullstackfit_reverseproxy.$GIT_COMMIT_SHA $DOCKER_USERNAME/fullstackfit_reverseproxy:latest | xargs -n 2 docker tag
          # Start application with 'make latest'. In this way we start the application the same was as we do in production.
          - make latest
      jobs:
        - name: Windows 10 - Chrome
          commands:
            - bash ./test/rerunner.sh robotlooper -v environment:localhost -v remote_webdriver:true -v capabilities:w10_chrome -v remote_url:${BROWSERSTACK_URL} testsuites/gui.robot
        - name: MacOS - Chrome
          commands:
            - bash ./test/rerunner.sh robotlooper -v environment:localhost -v remote_webdriver:true -v capabilities:mac_chrome -v remote_url:${BROWSERSTACK_URL} testsuites/gui.robot
      epilogue:
        always:
          commands:
            - make shutdown
            - artifact push job ./test/logs/log.html
            - artifact push job ./test/logs/output.xml
            - artifact push job ./test/logs/report.html
        on_fail:
          commands:
            - make notify-gitter level=error
  - name: Release candidate
    dependencies: ["Integration test", "E2E test", "Compatibility test"]
    task:
      prologue:
        commands:
          - checkout
          - export GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
          - export GIT_COMMIT_SHA_LONG=$(git rev-parse HEAD)
          - export GIT_COMMIT_MSG=$(git show -s --format=%B ${GIT_COMMIT_SHA})
      jobs:
        - name: notify to Gitter
          commands:
            - curl -d message="**[Semaphore[bot]](${SEMAPHORE_ORGANIZATION_URL})** [Release candidate!](${SEMAPHORE_ORGANIZATION_URL}/workflows/${SEMAPHORE_WORKFLOW_ID}) ${SEMAPHORE_JOB_RESULT} — [${GIT_COMMIT_SHA}](github.com/bamaas/FullStackFit/commit/${GIT_COMMIT_SHA_LONG}) *${GIT_COMMIT_MSG}*" -d level=info https://webhooks.gitter.im/e/afa7445bc110e2ed8000
promotions:
- name: Deploy
  pipeline_file: deploy-prod.yml
  auto_promote:
    when: "result = 'passed' and branch = 'master'"
execution_time_limit:
  minutes: 30